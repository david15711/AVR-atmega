
GccApplication1-3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000836  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077d  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b9  00000000  00000000  000017eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2f c0       	rjmp	.+94     	; 0xfa <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>

int main(void)
{
	
	DDRB = 0x0fe;
  9e:	8e ef       	ldi	r24, 0xFE	; 254
  a0:	87 bb       	out	0x17, r24	; 23
	int state = 0, value = 0, oldvalue = 0;
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	01 c0       	rjmp	.+2      	; 0xae <main+0x10>
#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  ac:	9c 01       	movw	r18, r24
	DDRB = 0x0fe;
	int state = 0, value = 0, oldvalue = 0;

    while (1) 
    {
		if((PINB & 0x03) == 0x01){
  ae:	86 b3       	in	r24, 0x16	; 22
  b0:	83 70       	andi	r24, 0x03	; 3
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	21 f4       	brne	.+8      	; 0xbe <main+0x20>
			value = (PINB & 0x03);
  b6:	86 b3       	in	r24, 0x16	; 22
  b8:	83 70       	andi	r24, 0x03	; 3
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x24>
		}	else (value = 0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0

		if( oldvalue == 0 && value == 1){
  c2:	23 2b       	or	r18, r19
  c4:	79 f4       	brne	.+30     	; 0xe4 <main+0x46>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	91 05       	cpc	r25, r1
  ca:	61 f4       	brne	.+24     	; 0xe4 <main+0x46>
			state = (state + 1 ) % 2;
  cc:	4f 5f       	subi	r20, 0xFF	; 255
  ce:	5f 4f       	sbci	r21, 0xFF	; 255
  d0:	41 70       	andi	r20, 0x01	; 1
  d2:	50 78       	andi	r21, 0x80	; 128
  d4:	55 23       	and	r21, r21
  d6:	34 f4       	brge	.+12     	; 0xe4 <main+0x46>
  d8:	41 50       	subi	r20, 0x01	; 1
  da:	51 09       	sbc	r21, r1
  dc:	4e 6f       	ori	r20, 0xFE	; 254
  de:	5f 6f       	ori	r21, 0xFF	; 255
  e0:	4f 5f       	subi	r20, 0xFF	; 255
  e2:	5f 4f       	sbci	r21, 0xFF	; 255
		}
		if(state == 1){
  e4:	41 30       	cpi	r20, 0x01	; 1
  e6:	51 05       	cpc	r21, r1
  e8:	21 f4       	brne	.+8      	; 0xf2 <main+0x54>
			PORTB |= 0x04;
  ea:	28 b3       	in	r18, 0x18	; 24
  ec:	24 60       	ori	r18, 0x04	; 4
  ee:	28 bb       	out	0x18, r18	; 24
  f0:	dd cf       	rjmp	.-70     	; 0xac <main+0xe>
		} else {
			PORTB &= ~0x04;
  f2:	28 b3       	in	r18, 0x18	; 24
  f4:	2b 7f       	andi	r18, 0xFB	; 251
  f6:	28 bb       	out	0x18, r18	; 24
  f8:	d9 cf       	rjmp	.-78     	; 0xac <main+0xe>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
