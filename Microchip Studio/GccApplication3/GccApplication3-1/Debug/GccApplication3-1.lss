
GccApplication3-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bcf  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000976  00000000  00000000  00000eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ab  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bf  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a2  00000000  00000000  000022c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 34       	cpi	r26, 0x48	; 72
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	71 c0       	rjmp	.+226    	; 0x198 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#include "UART_support.h"

int main(void)
{
	char receivestring, trash;
	UART0_init();
  b8:	3f d0       	rcall	.+126    	; 0x138 <UART0_init>
	while(UCSR0A & (1<<RXC0))
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x6>
	trash = UDR0;
  bc:	8c b1       	in	r24, 0x0c	; 12

int main(void)
{
	char receivestring, trash;
	UART0_init();
	while(UCSR0A & (1<<RXC0))
  be:	5f 99       	sbic	0x0b, 7	; 11
  c0:	fd cf       	rjmp	.-6      	; 0xbc <main+0x4>
	trash = UDR0;
	UART0_print_string((char*)"serial 연결 성공\n\r");
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	91 e0       	ldi	r25, 0x01	; 1
	
    while (1){
		receivestring = UART0_receive();
  c6:	53 d0       	rcall	.+166    	; 0x16e <UART0_print_string>
  c8:	4e d0       	rcall	.+156    	; 0x166 <UART0_receive>
		switch(receivestring){
  ca:	81 36       	cpi	r24, 0x61	; 97
  cc:	19 f0       	breq	.+6      	; 0xd4 <main+0x1c>
  ce:	82 36       	cpi	r24, 0x62	; 98
  d0:	91 f0       	breq	.+36     	; 0xf6 <main+0x3e>
			case 'a':
				UART0_print_string((char *)"atmega128 a 수신함\n\r");
  d2:	22 c0       	rjmp	.+68     	; 0x118 <main+0x60>
  d4:	87 e1       	ldi	r24, 0x17	; 23
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	4a d0       	rcall	.+148    	; 0x16e <UART0_print_string>
				while(UCSR0A & (1<<RXC0))
  da:	01 c0       	rjmp	.+2      	; 0xde <main+0x26>
					trash = UDR0;
  dc:	8c b1       	in	r24, 0x0c	; 12
    while (1){
		receivestring = UART0_receive();
		switch(receivestring){
			case 'a':
				UART0_print_string((char *)"atmega128 a 수신함\n\r");
				while(UCSR0A & (1<<RXC0))
  de:	5f 99       	sbic	0x0b, 7	; 11
  e0:	fd cf       	rjmp	.-6      	; 0xdc <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	83 ed       	ldi	r24, 0xD3	; 211
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x30>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x3a>
  f2:	00 00       	nop
					trash = UDR0;
				_delay_ms(1000);
				break;
			case 'b':
				UART0_print_string((char *)"atmega128 b 수신함\n\r");
  f4:	e9 cf       	rjmp	.-46     	; 0xc8 <main+0x10>
  f6:	8f e2       	ldi	r24, 0x2F	; 47
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	39 d0       	rcall	.+114    	; 0x16e <UART0_print_string>
				while(UCSR0A & (1<<RXC0))
  fc:	01 c0       	rjmp	.+2      	; 0x100 <main+0x48>
				trash = UDR0;
  fe:	8c b1       	in	r24, 0x0c	; 12
					trash = UDR0;
				_delay_ms(1000);
				break;
			case 'b':
				UART0_print_string((char *)"atmega128 b 수신함\n\r");
				while(UCSR0A & (1<<RXC0))
 100:	5f 99       	sbic	0x0b, 7	; 11
 102:	fd cf       	rjmp	.-6      	; 0xfe <main+0x46>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	83 ed       	ldi	r24, 0xD3	; 211
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x52>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x5c>
 114:	00 00       	nop
				trash = UDR0;
				_delay_ms(1000);
				break;
			default:
				UART0_transmit('\n');
 116:	d8 cf       	rjmp	.-80     	; 0xc8 <main+0x10>
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	21 d0       	rcall	.+66     	; 0x15e <UART0_transmit>
				while(UCSR0A & (1<<RXC0))
 11c:	01 c0       	rjmp	.+2      	; 0x120 <main+0x68>
				trash = UDR0;
 11e:	8c b1       	in	r24, 0x0c	; 12
				trash = UDR0;
				_delay_ms(1000);
				break;
			default:
				UART0_transmit('\n');
				while(UCSR0A & (1<<RXC0))
 120:	5f 99       	sbic	0x0b, 7	; 11
 122:	fd cf       	rjmp	.-6      	; 0x11e <main+0x66>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	83 ed       	ldi	r24, 0xD3	; 211
 128:	90 e3       	ldi	r25, 0x30	; 48
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x72>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x7c>
 134:	00 00       	nop
 136:	c8 cf       	rjmp	.-112    	; 0xc8 <main+0x10>

00000138 <UART0_init>:
﻿#include <avr/io.h>
#include <stdio.h>

void UART0_init(void){
	UBRR0H = 0x00;	//9,600 baud rate
 138:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 16.36;
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	89 b9       	out	0x09, r24	; 9
	UCSR0A |= _BV(U2X0);	//2배속
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	82 60       	ori	r24, 0x02	; 2
 144:	8b b9       	out	0x0b, r24	; 11
	
	//비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR0C |= 0x06;
 146:	e5 e9       	ldi	r30, 0x95	; 149
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	86 60       	ori	r24, 0x06	; 6
 14e:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);	//송수신 가능
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	80 61       	ori	r24, 0x10	; 16
 154:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= _BV(TXEN0);
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	8a b9       	out	0x0a, r24	; 10
 15c:	08 95       	ret

0000015e <UART0_transmit>:
	
}

void UART0_transmit(char data){
	while( !(UCSR0A & (1 << UDRE0)) );	//송신 가능 대기
 15e:	5d 9b       	sbis	0x0b, 5	; 11
 160:	fe cf       	rjmp	.-4      	; 0x15e <UART0_transmit>
	UDR0 = data;	//데이터 전송
 162:	8c b9       	out	0x0c, r24	; 12
 164:	08 95       	ret

00000166 <UART0_receive>:
}

unsigned char UART0_receive(void){
	while( !(UCSR0A & (1<<RXC0)) );	//수신 대기
 166:	5f 9b       	sbis	0x0b, 7	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <UART0_receive>
	return UDR0;
 16a:	8c b1       	in	r24, 0x0c	; 12
}
 16c:	08 95       	ret

0000016e <UART0_print_string>:

void UART0_print_string(char *str){	//문자열 송신
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	8c 01       	movw	r16, r24
	for(int i = 0; str[i]; i++)	//NULL 문자가 나올 때까지
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <UART0_print_string+0x14>
		UART0_transmit(str[i]);	//바이트 단위 출력
 17e:	ef df       	rcall	.-34     	; 0x15e <UART0_transmit>
	while( !(UCSR0A & (1<<RXC0)) );	//수신 대기
	return UDR0;
}

void UART0_print_string(char *str){	//문자열 송신
	for(int i = 0; str[i]; i++)	//NULL 문자가 나올 때까지
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	f8 01       	movw	r30, r16
 184:	ec 0f       	add	r30, r28
 186:	fd 1f       	adc	r31, r29
 188:	80 81       	ld	r24, Z
 18a:	81 11       	cpse	r24, r1
 18c:	f8 cf       	rjmp	.-16     	; 0x17e <UART0_print_string+0x10>
		UART0_transmit(str[i]);	//바이트 단위 출력
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
